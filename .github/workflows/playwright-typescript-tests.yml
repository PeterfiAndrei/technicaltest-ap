name: Playwright Browser Tests
run-name: ${{ github.workflow }} @ ${{ github.ref_name }}

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [1]
    env:
      PLAYWRIGHT_SHARD: ${{ matrix.shard }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: 🛠️ Install Dependencies
        run: npm ci

      - name: 💾 Cache Playwright Browsers
        id: cache-browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-browsers-

      - name: 🌐 Install Playwright Browsers
        if: steps.cache-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: 🛠️ Install Allure
        run: npm install -g allure-commandline

      - name: 🐛 Debug Test Files
        run: |
          echo "Listing test files:"
          ls -la tests/

      - name: ▶️ Run Playwright Tests
        run: npx playwright test || echo "exit_code=$?" >> $GITHUB_ENV

      - name: 🐛 Debug Allure Results
        if: always()
        run: |
          echo "Listing allure-results contents:"
          ls -la allure-results || echo "allure-results is empty or missing"

      - name: 📂 Checkout gh-pages Branch
        uses: actions/checkout@v4
        if: always()
        with:
          ref: gh-pages
          path: gh-pages
          fetch-depth: 0
        continue-on-error: true

      - name: 📝 Format Branch Name
        id: format_branch_name
        run: |
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's#/#-#g')
          echo "formatted_name=$BRANCH_NAME" >> $GITHUB_ENV
          echo "Formatted branch name: $BRANCH_NAME"

      - name: ♻️ Copy Previous History
        if: always()
        run: |
          if [ -d "gh-pages/${{ env.formatted_name }}/history" ]; then
            mkdir -p allure-results/history
            cp -r gh-pages/${{ env.formatted_name }}/history allure-results/
            echo "Copied history from gh-pages/${{ env.formatted_name }}/history"
          else
            echo "No previous history found in gh-pages/${{ env.formatted_name }}/history"
          fi

      - name: ✨ Generate Allure Report
        if: always()
        run: |
          mkdir -p allure-report
          allure generate allure-results --clean -o allure-report || echo "⚠️ Warning: No files in allure-results!"
          echo "Listing allure-report contents:"
          ls -la allure-report

      - name: ✅ Check if Allure Report Exists
        id: check_report
        run: |
          if [ -d "allure-report" ] && [ "$(ls -A allure-report)" ]; then
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "exists=false" >> $GITHUB_ENV
          fi

      - name: 🚀 Deploy Allure Report to GitHub Pages
        if: env.exists == 'true'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-report
          destination_dir: ${{ env.formatted_name }}
          keep_files: true
          enable_verbose: true

      - name: 🐛 Debug gh-pages Contents
        if: env.exists == 'true'
        run: |
          echo "Listing gh-pages/${{ env.formatted_name }} contents after deployment:"
          ls -la gh-pages/${{ env.formatted_name }} || echo "gh-pages/${{ env.formatted_name }} is empty or missing"

      - name: 🔗 Print Allure Report URL
        if: env.exists == 'true'
        run: |
          echo "🔗 Allure Report: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ env.formatted_name }}"

      - name: 🧹 Clean Up
        if: always()
        run: rm -rf allure-results

      - name: 🚩 Fail if Tests Failed
        if: env.exit_code != '0'
        run: exit 1